const mongoose = require('mongoose');

// ุงุณุชุฎุฏุงู ุจูุงูุงุช ุงูุงุชุตุงู ุงูุตุญูุญุฉ
const MONGODB_URI = 'mongodb+srv://elhadad3593:NIqGTCLDJJFOFbtf@cluster0.3vqlnfg.mongodb.net/paypass?retryWrites=true&w=majority';

// ุชุนุฑูู ุงูููุงุฐุฌ
const packageSchema = new mongoose.Schema({
  name: { type: String, required: true },
  basePrice: { type: Number, required: true },
  originalPrice: { type: Number, required: true },
  features: [{ type: String }],
  popular: { type: Boolean, default: false },
  washes: { type: Number, required: true },
  savings: { type: Number, required: true },
  duration: { type: Number, required: true },
  size: { type: String, enum: ['small', 'medium', 'large'], required: true },
}, { timestamps: true });

const carSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  make: { type: String, required: true },
  model: { type: String, required: true },
  year: { type: Number, required: true },
  licensePlate: { type: String, required: true, unique: true },
  color: { type: String },
  type: { type: String, enum: ['sedan', 'suv', 'truck', 'van', 'coupe', 'convertible', 'wagon', 'other'], required: true },
  size: { type: String, enum: ['small', 'medium', 'large'], required: true },
}, { timestamps: true });

const washingPlaceSchema = new mongoose.Schema({
  name: { type: String, required: true },
  address: { type: String, required: true },
  phone: { type: String, required: true },
  hours: { type: String, required: true },
  email: { type: String, default: null },
  location: {
    type: String, default: 'Point'
  },
  city: { type: String },
  rating: { type: Number, min: 0, max: 5 },
  customers: { type: Number }
}, { timestamps: true });

const Package = mongoose.model('Package', packageSchema);
const Car = mongoose.model('Car', carSchema);
const WashingPlace = mongoose.model('WashingPlace', washingPlaceSchema);

async function getRealData() {
  try {
    console.log('๐ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    await mongoose.connect(MONGODB_URI);
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ!');

    console.log('\n๐ฆ === ุงูุจุงูุงุช ุงูููุฌูุฏุฉ ===');
    const packages = await Package.find();
    if (packages.length === 0) {
      console.log('โ ูุง ุชูุฌุฏ ุจุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    } else {
      packages.forEach((pkg, index) => {
        console.log(`${index + 1}. ${pkg.name}`);
        console.log(`   ุงูุณุนุฑ ุงูุฃุณุงุณู: ${pkg.basePrice} ุฑูุงู`);
        console.log(`   ุงูุณุนุฑ ุงูุฃุตูู: ${pkg.originalPrice} ุฑูุงู`);
        console.log(`   ุนุฏุฏ ุงูุบุณูุงุช: ${pkg.washes}`);
        console.log(`   ุงูุชูููุฑ: ${pkg.savings} ุฑูุงู`);
        console.log(`   ุงููุฏุฉ: ${pkg.duration} ููู`);
        console.log(`   ุญุฌู ุงูุณูุงุฑุฉ: ${pkg.size}`);
        console.log(`   ุงููููุฒุงุช: ${pkg.features.join(', ')}`);
        console.log(`   ุดุงุฆุน: ${pkg.popular ? 'ูุนู' : 'ูุง'}`);
        console.log('');
      });
    }

    console.log('\n๐ === ุฃุญุฌุงู ุงูุณูุงุฑุงุช ===');
    const cars = await Car.find();
    if (cars.length === 0) {
      console.log('โ ูุง ุชูุฌุฏ ุณูุงุฑุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    } else {
      const sizes = [...new Set(cars.map(car => car.size))];
      console.log('ุงูุฃุญุฌุงู ุงูููุฌูุฏุฉ:', sizes);
      cars.forEach((car, index) => {
        console.log(`${index + 1}. ${car.make} ${car.model} (${car.year})`);
        console.log(`   ุงูููุญุฉ: ${car.licensePlate}`);
        console.log(`   ุงูุญุฌู: ${car.size}`);
        console.log(`   ุงูููุน: ${car.type}`);
        console.log(`   ุงูููู: ${car.color}`);
        console.log('');
      });
    }

    console.log('\n๐ข === ุงููุบุงุณู ุงูููุฌูุฏุฉ ===');
    const washingPlaces = await WashingPlace.find();
    if (washingPlaces.length === 0) {
      console.log('โ ูุง ุชูุฌุฏ ูุบุงุณู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    } else {
      washingPlaces.forEach((place, index) => {
        console.log(`${index + 1}. ${place.name}`);
        console.log(`   ุงูุนููุงู: ${place.address}`);
        console.log(`   ุงููุฏููุฉ: ${place.city}`);
        console.log(`   ุงููุงุชู: ${place.phone}`);
        console.log(`   ุณุงุนุงุช ุงูุนูู: ${place.hours}`);
        console.log(`   ุงูุชูููู: ${place.rating || 'ุบูุฑ ูุญุฏุฏ'}`);
        console.log(`   ุนุฏุฏ ุงูุนููุงุก: ${place.customers || 'ุบูุฑ ูุญุฏุฏ'}`);
        console.log(`   ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: ${place.email || 'ุบูุฑ ูุญุฏุฏ'}`);
        console.log('');
      });
    }

    console.log('\n๐ === ููุฎุต ุงูุจูุงูุงุช ===');
    console.log(`ุนุฏุฏ ุงูุจุงูุงุช: ${packages.length}`);
    console.log(`ุนุฏุฏ ุงูุณูุงุฑุงุช: ${cars.length}`);
    console.log(`ุนุฏุฏ ุงููุบุงุณู: ${washingPlaces.length}`);

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุณุชุฏุนุงุก ุงูุจูุงูุงุช:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('๐ ุชู ูุทุน ุงูุงุชุตุงู');
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
getRealData(); 